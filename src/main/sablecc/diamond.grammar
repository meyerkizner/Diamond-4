/*
 * diamond.grammar
 * Copyright (C) 2012 Pre-Alpha Software
 * All rights reserved.
 */


Package com.prealpha.diamond.compiler;


Helpers
	
	ascii_input_character = [0x00..0x7f];
	ht = 0x09;
	lf = 0x0a;
	ff = 0x0c;
	cr = 0x0d;
	sp = ' ';
	
	line_terminator = lf | cr | cr lf;
	input_character = [ascii_input_character - [cr + lf]];
	
	not_star = [input_character - '*'] | line_terminator;
	not_star_not_slash = [input_character - ['*' + '/']] | line_terminator;
	
	ascii_letter = [0x41..0x5a] | [0x61..0x7a];
	ascii_digit = [0x30..0x39];
	
	identifier_letter = ascii_letter | '$' | '_';
	identifier_letter_or_digit = ascii_letter | ascii_digit | '$' | '_';
	
	non_zero_digit = ['1'..'9'];
	digit = ['0'..'9'];
	hex_digit = ['0'..'9'] | ['a'..'f'] | ['A'..'F'];
	octal_digit = ['0'..'7'];
	binary_digit = '0' | '1';
	
	escape_sequence = '\b' | '\t' | '\n' | '\f' | '\r' | '\"' | '\' ''' | '\\';
	string_character = [input_character - ['"' + '\']] | escape_sequence;


Tokens
	
	// separators
	comma = ',';
	dot = '.';
	l_bkt = '[';
	l_brc = '{';
	l_par = '(';
	r_bkt = ']';
	r_brc = '}';
	r_par = ')';
	semi  = ';';
	bkt_pair = '[]';
	colon_colon = '::';
	
	// operators
	amp = '&';
	amp_amp = '&&';
	amp_assign = '&=';
	assign = '=';
	bar = '|';
	bar_assign = '|=';
	bar_bar = '||';
	caret = '^';
	caret_assign = '^=';
	caret_caret = '^^';
	colon = ':';
	emark = '!';
	eq = '==';
	gt = '>';
	gteq = '>=';
	lt = '<';
	lteq = '<=';
	minus = '-';
	minus_assign = '-=';
	minus_minus = '--';
	neq = '!=';
	percent = '%';
	percent_assign = '%=';
	plus = '+';
	plus_assign = '+=';
	plus_plus = '++';
	qmark = '?';
	shl = '<<';
	shl_assign = '<<=';
	shr = '>>';
	shr_assign = '>>=';
	slash = '/';
	slash_assign = '/=';
	star = '*';
	star_assign = '*=';
	tilde = '~';
	ushr = '>>>';
    ushr_assign = '>>>=';
	
	// keywords
	abstract = 'abstract';
	boolean = 'boolean';
	break = 'break';
	case = 'case';
	catch = 'catch';
	class_token = 'class';
	const = 'const';
	continue = 'continue';
	default = 'default';
	delete = 'delete';
	do = 'do';
	double = 'double';
	else_token = 'else';
	enum = 'enum';
	extends = 'extends';
	final = 'final';
	finally = 'finally';
	float = 'float';
	for = 'for';
	goto = 'goto';
	if = 'if';
	implements = 'implements';
	include_token = 'include';
	instanceof = 'instanceof';
	int = 'int';
	interface = 'interface';
	long = 'long';
	native = 'native';
	new = 'new';
	private = 'private';
	protected = 'protected';
	raise = 'raise';
	return = 'return';
	short = 'short';
	signed = 'signed';
	static = 'static';
	super = 'super';
	switch = 'switch';
	this = 'this';
	throw = 'throw';
	throws_token = 'throws';
	try = 'try';
	unsigned = 'unsigned';
	virtual = 'virtual';
	void = 'void';
	while = 'while';
	yield = 'yield';
	
	// literals
	decimal_literal = '0' | non_zero_digit digit*;
    hex_literal = '0' ('x' | 'X') hex_digit+;
    octal_literal = '0' octal_digit+;
    binary_literal = '0' ('b' | 'B') binary_digit+;
	string_literal = '"' string_character* '"';
	true_literal = 'true';
	false_literal = 'false';
	
	// identifier
	identifier = identifier_letter identifier_letter_or_digit*;
	
	// whitespace and comments
	whitespace = (sp | ht | ff | line_terminator);
	block_comment = '/*' not_star+ '*'+ (not_star_not_slash not_star* '*'+)* '/';
	line_comment = '//' input_character* line_terminator?;


Ignored Tokens
	
	whitespace,
	block_comment,
	line_comment;


Productions
	
	program = top_level_statement*;
	top_level_statement =   {class} class_declaration {-> New top_level_statement.class(class_declaration)} |
							{function} function_declaration {-> New top_level_statement.function(function_declaration)} |
							{include} include {-> New top_level_statement.include(include)};
	statement = {standalone_statement} standalone_statement {-> standalone_statement.statement} |
				{if_then_statement} if_then_statement {-> if_then_statement.statement} |
				{if_then_else_statement} if_then_else_statement {-> if_then_else_statement.statement} |
				{while_statement} while_statement {-> while_statement.statement} |
				{for_statement} for_statement {-> for_statement.statement};
	standalone_statement {-> statement} =   {block} block {-> New statement.block([block.statement])} |
											{empty} empty_statement {-> empty_statement.statement} |
											{expression} expression_statement {-> expression_statement.statement} |
											{switch} switch_statement {-> switch_statement.statement} |
											{do} do_statement {-> do_statement.statement} |
											{delete} delete_statement {-> delete_statement.statement} |
											{break} break_statement {-> break_statement.statement} |
											{continue} continue_statement {-> continue_statement.statement} |
											{return} return_statement {-> return_statement.statement};
	statement_no_short_if {-> statement} =  {standalone} standalone_statement {-> standalone_statement.statement} |
											{if_then_else_statement} if_then_else_statement_no_short_if {-> if_then_else_statement_no_short_if.statement} |
											{while_statement} while_statement_no_short_if {-> while_statement_no_short_if.statement} |
											{for_statement} for_statement_no_short_if {-> for_statement_no_short_if.statement};
	
	class_declaration = [modifiers]:modifier* class_token [name]:identifier class_body {-> New class_declaration([modifiers], name, [class_body.class_statement])};
	class_body {-> class_statement*} = l_brc class_statement* r_brc {-> [class_statement]};
	class_statement =   {field} field_declaration |
						{function} function_declaration |
						{constructor} constructor_declaration;
	
	field_declaration = [modifiers]:modifier* [type]:type_token [name]:identifier semi {-> New field_declaration([modifiers], type, name)};
	
	function_declaration =  [modifiers]:modifier* [return_type]:type_token [name]:identifier l_par [parameters]:formal_parameter_list? r_par block {-> New function_declaration([modifiers], return_type, name, [parameters.local_declaration], [block.statement])} |
							{void} [modifiers]:modifier* void [name]:identifier l_par [parameters]:formal_parameter_list? r_par block {-> New function_declaration.void([modifiers], name, [parameters.local_declaration], [block.statement])};
	constructor_declaration = [modifiers]:modifier* [return_type]:identifier new l_par [parameters]:formal_parameter_list? r_par block {-> New constructor_declaration([modifiers], return_type, [parameters.local_declaration], [block.statement])};
	formal_parameter_list {-> local_declaration*} = {simple} local_declaration {-> [local_declaration]} |
													{compound} formal_parameter_list comma local_declaration {-> [formal_parameter_list.local_declaration, local_declaration]};

	include = include_token [file_name]:string_literal semi {-> New include(file_name)};
	
	block {-> statement*} = l_brc statement* r_brc {-> [statement]};
	
	empty_statement {-> statement} = semi {-> New statement.empty()};
	
	expression_statement {-> statement} =   statement_expression semi {-> New statement.expression(statement_expression.expression)};
    statement_expression {-> expression} =  {assignment} assignment {-> New expression.assignment(assignment)} |
				                            {function_invocation} function_invocation {-> New expression.primary(New primary_expression.function_invocation(function_invocation))} |
				                            {constructor_invocation} constructor_invocation {-> New expression.primary(New primary_expression.constructor_invocation(constructor_invocation))};

	if_then_statement {-> statement} = if l_par [condition]:expression r_par [then]:statement {-> New statement.if_then(condition, then)};
	if_then_else_statement {-> statement} = if l_par [condition]:expression r_par [then]:statement_no_short_if else_token [else]:statement {-> New statement.if_then_else(condition, then.statement, else)};
	if_then_else_statement_no_short_if {-> statement} = if l_par [condition]:expression r_par [then]:statement_no_short_if else_token [else]:statement_no_short_if {-> New statement.if_then_else(condition, then.statement, else.statement)};
	
	switch_statement {-> statement} = switch l_par [value]:expression r_par switch_block {-> New statement.switch(value, [switch_block.case_group])};
    switch_block {-> case_group*} = l_brc switch_group* r_brc {-> [switch_group.case_group]};
	switch_group {-> case_group} =  switch_label+ statement+ {-> New case_group([switch_label.integral_literal], [statement])} |
									{default} [before]:switch_label* default colon [after]:switch_label* statement+ {-> New case_group.default([before.integral_literal, after.integral_literal], [statement])};
    switch_label {-> integral_literal} = case [value]:integral_literal colon {-> value};
	
	while_statement {-> statement} = while l_par [condition]:expression r_par statement {-> New statement.while(condition, statement)};
	while_statement_no_short_if {-> statement} = while l_par [condition]:expression r_par statement_no_short_if {-> New statement.while(condition, statement_no_short_if.statement)};
	
	do_statement {-> statement} = do statement while l_par [condition]:expression r_par semi {-> New statement.do(statement, condition)};
	
    for_statement {-> statement} = for l_par [init]:statement_expression? [semi1]:semi [condition]:expression? [semi2]:semi [update]:statement_expression? r_par statement {-> New statement.for(init.expression, condition, update.expression, statement)};
    for_statement_no_short_if {-> statement} = for l_par [init]:statement_expression? [semi1]:semi [condition]:expression? [semi2]:semi [update]:statement_expression? r_par statement_no_short_if {-> New statement.for(init.expression, condition, update.expression, statement_no_short_if.statement)};
	
    delete_statement {-> statement} = delete identifier semi {-> New statement.delete(identifier)};
	
	break_statement {-> statement} = break semi {-> New statement.break()};
	
	continue_statement {-> statement} = continue semi {-> New statement.continue()};
	
	return_statement {-> statement} = return [return_value]:expression? semi {-> New statement.return(return_value)};

	primary_expression =    {literal} literal {-> New primary_expression.literal(literal)} |
							{identifier} identifier {-> New primary_expression.identifier(identifier)} |
							{this} this {-> New primary_expression.this()} |
							{parenthetical} l_par expression r_par {-> New primary_expression.parenthetical(expression)} |
							{function_invocation} function_invocation {-> New primary_expression.function_invocation(function_invocation)} |
							{constructor_invocation} constructor_invocation {-> New primary_expression.constructor_invocation(constructor_invocation)} |
							{array_access} array_access {-> New primary_expression.array_access(array_access)} |
							{qualified_name} qualified_name {-> New primary_expression.qualified_name(qualified_name)};

	literal =   {integral} integral_literal {-> New literal.integral(integral_literal)} |
				{string} string_literal {-> New literal.string(string_literal)} |
				{true} true_literal {-> New literal.true()} |
				{false} false_literal {-> New literal.false()};
	integral_literal =  {decimal} decimal_literal {-> New integral_literal.decimal(decimal_literal)} |
						{hex} hex_literal {-> New integral_literal.hex(hex_literal)} |
						{octal} octal_literal {-> New integral_literal.octal(octal_literal)} |
						{binary} binary_literal {-> New integral_literal.binary(binary_literal)};

	qualified_name =    {identifier} [target]:identifier dot [name]:identifier {-> New qualified_name.expression(New primary_expression.identifier(target), name)} |
						{expression} [target]:primary_expression dot [name]:identifier {-> New qualified_name.expression(target, name)} |
						{type_token} [target]:type_token? colon_colon [name]:identifier {-> New qualified_name.type_token(target, name)};
	
	function_invocation =   {unqualified} [function_name]:identifier l_par actual_parameter_list? r_par {-> New function_invocation.unqualified(function_name, [actual_parameter_list.expression])} |
							{qualified} [function_name]:qualified_name l_par actual_parameter_list? r_par {-> New function_invocation.qualified(function_name, [actual_parameter_list.expression])};
	constructor_invocation =    {implied_target} new l_par actual_parameter_list? r_par {-> New constructor_invocation(Null, [actual_parameter_list.expression])} |
								{type_token_target} type_token colon_colon new l_par actual_parameter_list? r_par {-> New constructor_invocation(type_token, [actual_parameter_list.expression])};
	actual_parameter_list {-> expression*} =    {simple} expression {-> [expression]} |
                                                {compound} actual_parameter_list comma expression {-> [actual_parameter_list.expression, expression]};
	
	array_access =  {unqualified} [array_name]:identifier l_bkt [index]:expression r_bkt {-> New array_access.unqualified(array_name, index)} |
					{qualified} [array_name]:qualified_name l_bkt [index]:expression r_bkt {-> New array_access.qualified(array_name, index)};
	
	unary_expression {-> expression} =  {primary} primary_expression {-> New expression.primary(primary_expression)} |
										{unary_plus} plus unary_expression {-> unary_expression.expression} |
										{unary_minus} minus unary_expression {-> New expression.numeric_negation(unary_expression.expression)} |
										{conditional_not} emark unary_expression {-> New expression.conditional_not(unary_expression.expression)} |
										{bitwise_complement} tilde unary_expression {-> New expression.bitwise_complement(unary_expression.expression)};
	
	multiplicative_expression {-> expression} = {unary} unary_expression {-> unary_expression.expression} |
												{multiplication} multiplicative_expression star unary_expression {-> New expression.multiply(multiplicative_expression.expression, unary_expression.expression)} |
												{division} multiplicative_expression slash unary_expression {-> New expression.divide(multiplicative_expression.expression, unary_expression.expression)} |
												{modulus} multiplicative_expression percent unary_expression {-> New expression.modulus(multiplicative_expression.expression, unary_expression.expression)};
	
	additive_expression {-> expression} =   {multiplicative} multiplicative_expression {-> multiplicative_expression.expression} |
											{addition} additive_expression plus multiplicative_expression {-> New expression.add(additive_expression.expression, multiplicative_expression.expression)} |
											{subtraction} additive_expression minus multiplicative_expression {-> New expression.subtract(additive_expression.expression, multiplicative_expression.expression)};
	
	shift_expression {-> expression} =  {additive} additive_expression {-> additive_expression.expression} |
										{shift_left} shift_expression shl additive_expression {-> New expression.shift_left(shift_expression.expression, additive_expression.expression)} |
										{shift_right} shift_expression shr additive_expression {-> New expression.shift_right(shift_expression.expression, additive_expression.expression)} |
										{unsigned_shift_right} shift_expression ushr additive_expression {-> New expression.unsigned_shift_right(shift_expression.expression, additive_expression.expression)};
	
	relational_expression {-> expression} = {shift} shift_expression {-> shift_expression.expression} |
											{less_than} relational_expression lt shift_expression {-> New expression.less_than(relational_expression.expression, shift_expression.expression)} |
											{greater_than} relational_expression gt shift_expression {-> New expression.greater_than(relational_expression.expression, shift_expression.expression)} |
											{less_or_equal} relational_expression lteq shift_expression {-> New expression.less_or_equal(relational_expression.expression, shift_expression.expression)} |
											{greater_or_equal} relational_expression gteq shift_expression {-> New expression.greater_or_equal(relational_expression.expression, shift_expression.expression)};
	
	equality_expression {-> expression} =   {relational} relational_expression {-> relational_expression.expression} |
											{equal} equality_expression eq relational_expression {-> New expression.equal(equality_expression.expression, relational_expression.expression)} |
											{not_equal} equality_expression neq relational_expression {-> New expression.not_equal(equality_expression.expression, relational_expression.expression)};
	
	bitwise_and_expression {-> expression} =    {equality} equality_expression {-> equality_expression.expression} |
												{bitwise_and} bitwise_and_expression amp equality_expression {-> New expression.bitwise_and(bitwise_and_expression.expression, equality_expression.expression)};
	bitwise_xor_expression {-> expression} =    {bitwise_and} bitwise_and_expression {-> bitwise_and_expression.expression} |
												{bitwise_xor} bitwise_xor_expression caret bitwise_and_expression {-> New expression.bitwise_xor(bitwise_xor_expression.expression, bitwise_and_expression.expression)};
	bitwise_or_expression {-> expression} =     {bitwise_xor} bitwise_xor_expression {-> bitwise_xor_expression.expression} |
												{bitwise_or} bitwise_or_expression bar bitwise_xor_expression {-> New expression.bitwise_or(bitwise_or_expression.expression, bitwise_xor_expression.expression)};
	
	conditional_and_expression {-> expression} =    {bitwise_or} bitwise_or_expression {-> bitwise_or_expression.expression} |
													{conditional_and} conditional_and_expression amp_amp bitwise_or_expression {-> New expression.conditional_and(conditional_and_expression.expression, bitwise_or_expression.expression)};
	conditional_or_expression {-> expression} =     {conditional_xor} conditional_and_expression {-> conditional_and_expression.expression} |
													{conditional_or} conditional_or_expression bar_bar conditional_and_expression {-> New expression.conditional_or(conditional_or_expression.expression, conditional_and_expression.expression)};
	
	conditional_expression {-> expression} =    {conditional_or} conditional_or_expression {-> conditional_or_expression.expression} |
												{conditional} conditional_or_expression qmark expression colon conditional_expression {-> New expression.conditional(conditional_or_expression.expression, expression, conditional_expression.expression)};
	
	assignment_expression {-> expression} = {conditional} conditional_expression {-> conditional_expression.expression} |
											{assignment} assignment {-> New expression.assignment(assignment)};
	assignment =    left_hand_side assign assignment_expression {-> New assignment(left_hand_side.assignment_target, assignment_expression.expression)} |
					{star} left_hand_side star_assign assignment_expression {-> New assignment.multiply(left_hand_side.assignment_target, assignment_expression.expression)} |
					{slash} left_hand_side slash_assign assignment_expression {-> New assignment.divide(left_hand_side.assignment_target, assignment_expression.expression)} |
					{percent} left_hand_side percent_assign assignment_expression {-> New assignment.modulus(left_hand_side.assignment_target, assignment_expression.expression)} |
					{plus} left_hand_side plus_assign assignment_expression {-> New assignment.add(left_hand_side.assignment_target, assignment_expression.expression)} |
					{minus} left_hand_side minus_assign assignment_expression {-> New assignment.subtract(left_hand_side.assignment_target, assignment_expression.expression)} |
					{shl} left_hand_side shl_assign assignment_expression {-> New assignment.shift_left(left_hand_side.assignment_target, assignment_expression.expression)} |
					{shr} left_hand_side shr_assign assignment_expression {-> New assignment.shift_right(left_hand_side.assignment_target, assignment_expression.expression)} |
					{ushr} left_hand_side ushr_assign assignment_expression {-> New assignment.unsigned_shift_right(left_hand_side.assignment_target, assignment_expression.expression)} |
					{amp} left_hand_side amp_assign assignment_expression {-> New assignment.bitwise_and(left_hand_side.assignment_target, assignment_expression.expression)} |
					{caret} left_hand_side caret_assign assignment_expression {-> New assignment.bitwise_xor(left_hand_side.assignment_target, assignment_expression.expression)} |
					{bar} left_hand_side bar_assign assignment_expression {-> New assignment.bitwise_or(left_hand_side.assignment_target, assignment_expression.expression)};
	left_hand_side {-> assignment_target} = {local_declaration} local_declaration {-> New assignment_target.local_declaration(local_declaration)} |
											{identifier} identifier {-> New assignment_target.identifier(identifier)} |
											{qualified_name} qualified_name {-> New assignment_target.qualified_name(qualified_name)} |
											{array_access} array_access {-> New assignment_target.array_access(array_access)};
	local_declaration = [modifiers]:modifier* [type]:type_token [name]:identifier;
	
	expression = assignment_expression {-> assignment_expression.expression};
	
	type_token =    {boolean} boolean {-> New type_token.boolean()} |
					{signed_short} signed? short {-> New type_token.signed_short()} |
					{unsigned_short} unsigned short {-> New type_token.unsigned_short()} |
					{signed_int} signed? int {-> New type_token.signed_int()} |
					{unsigned_int} unsigned int {-> New type_token.unsigned_int()} |
					{signed_long} signed? long {-> New type_token.signed_long()} |
					{unsigned_long} unsigned long {-> New type_token.unsigned_long()} |
					{user_defined} identifier {-> New type_token.user_defined(identifier)} |
					{array} [element_type]:type_token bkt_pair {-> New type_token.array(element_type)};
	modifier =  {private} private {-> New modifier.private()} |
				{static} static {-> New modifier.static()};


Abstract Syntax Tree

	program = top_level_statement*;
	top_level_statement =   {class} class_declaration |
							{function} function_declaration |
							{include} include;
	statement =             {if_then} [condition]:expression [then]:statement |
							{if_then_else} [condition]:expression [then]:statement [else]:statement |
							{while} [condition]:expression [body]:statement |
							{for} [init]:expression? [condition]:expression? [update]:expression? [body]:statement |
							{do} [body]:statement [condition]:expression |
							{switch} [value]:expression [body]:case_group* |
							{delete} [variable]:identifier |
							{break} |
							{continue} |
							{return} [return_value]:expression? |
							{expression} expression |
							{block} statement* |
							{empty};
	case_group =            [values]:integral_literal+ [body]:statement+ |
                            {default} [values]:integral_literal* [body]:statement+;

	class_declaration = [modifiers]:modifier* [name]:identifier [body]:class_statement*;
	class_statement =   {field} field_declaration |
						{function} function_declaration |
						{constructor} constructor_declaration;

	field_declaration = [modifiers]:modifier* [type]:type_token [name]:identifier;

	function_declaration =  [modifiers]:modifier* [return_type]:type_token [name]:identifier [parameters]:local_declaration* [body]:statement* |
							{void} [modifiers]:modifier* [name]:identifier [parameters]:local_declaration* [body]:statement*;
	constructor_declaration = [modifiers]:modifier* [return_type]:identifier [parameters]:local_declaration* [body]:statement*;
	
	local_declaration = [modifiers]:modifier* [type]:type_token [name]:identifier;

	include = [file_name]:string_literal;

	primary_expression =        {literal} literal |
								{identifier} identifier |
								{qualified_name} qualified_name |
								{this} |
								{parenthetical} expression |
								{function_invocation} function_invocation |
								{constructor_invocation} constructor_invocation |
								{array_access} array_access;
	literal =                   {integral} integral_literal |
								{string} string_literal |
								{true} |
								{false};
	integral_literal =          {decimal} decimal_literal |
								{hex} hex_literal |
								{octal} octal_literal |
								{binary} binary_literal;
	function_invocation =       {unqualified} [function_name]:identifier [parameters]:expression* |
								{qualified} [function_name]:qualified_name [parameters]:expression*;
	constructor_invocation =    [target]:type_token? [parameters]:expression*;
	array_access =              {unqualified} [array_name]:identifier [index]:expression |
								{qualified} [array_name]:qualified_name [index]:expression;
	qualified_name =            {expression} [target]:primary_expression [name]:identifier |
								{type_token} [target]:type_token? [name]:identifier;

	expression =    {primary} primary_expression |
					{numeric_negation} [value]:expression |
					{conditional_not} [value]:expression |
					{bitwise_complement} [value]:expression |
					{multiply} [left]:expression [right]:expression |
					{divide} [left]:expression [right]:expression |
					{modulus} [left]:expression [right]:expression |
					{add} [left]:expression [right]:expression |
					{subtract} [left]:expression [right]:expression |
					{shift_left} [left]:expression [right]:expression |
					{shift_right} [left]:expression [right]:expression |
					{unsigned_shift_right} [left]:expression [right]:expression |
					{less_than} [left]:expression [right]:expression |
					{greater_than} [left]:expression [right]:expression |
					{less_or_equal} [left]:expression [right]:expression |
					{greater_or_equal} [left]:expression [right]:expression |
					{equal} [left]:expression [right]:expression |
					{not_equal} [left]:expression [right]:expression |
					{bitwise_and} [left]:expression [right]:expression |
					{bitwise_xor} [left]:expression [right]:expression |
					{bitwise_or} [left]:expression [right]:expression |
					{conditional_and} [left]:expression [right]:expression |
					{conditional_or} [left]:expression [right]:expression |
					{conditional} [condition]:expression [if_true]:expression [if_false]:expression |
					{assignment} assignment;
	assignment =    [target]:assignment_target [value]:expression |
					{add} [target]:assignment_target [value]:expression |
					{subtract} [target]:assignment_target [value]:expression |
					{multiply} [target]:assignment_target [value]:expression |
					{divide} [target]:assignment_target [value]:expression |
					{modulus} [target]:assignment_target [value]:expression |
					{bitwise_and} [target]:assignment_target [value]:expression |
					{bitwise_xor} [target]:assignment_target [value]:expression |
					{bitwise_or} [target]:assignment_target [value]:expression |
					{shift_left} [target]:assignment_target [value]:expression |
					{shift_right} [target]:assignment_target [value]:expression |
					{unsigned_shift_right} [target]:assignment_target [value]:expression;
	assignment_target = {local_declaration} local_declaration |
						{identifier} identifier |
						{qualified_name} qualified_name |
						{array_access} array_access;

	type_token =    {boolean} |
					{signed_short} |
					{unsigned_short} |
					{signed_int} |
					{unsigned_int} |
					{signed_long} |
					{unsigned_long} |
					{user_defined} identifier |
					{array} [element_type]:type_token;
	modifier =      {private} |
					{static};

